/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type jboolean = ::std::os::raw::c_uchar;
pub type jbyte = ::std::os::raw::c_char;
pub type jchar = ::std::os::raw::c_ushort;
pub type jshort = ::std::os::raw::c_short;
pub type jint = ::std::os::raw::c_int;
pub type jlong = ::std::os::raw::c_longlong;
pub type jfloat = f32;
pub type jdouble = f64;
pub type jsize = jint;
pub type jobject = *mut ::std::os::raw::c_void;
pub type jclass = jobject;
pub type jstring = jobject;
pub type jarray = jobject;
pub type jobjectArray = jarray;
pub type jbooleanArray = jarray;
pub type jbyteArray = jarray;
pub type jcharArray = jarray;
pub type jshortArray = jarray;
pub type jintArray = jarray;
pub type jlongArray = jarray;
pub type jfloatArray = jarray;
pub type jdoubleArray = jarray;
pub type jthrowable = jobject;
pub type jweak = jobject;
pub enum _jfieldID { }
pub type jfieldID = *mut _jfieldID;
pub enum _jmethodID { }
pub type jmethodID = *mut _jmethodID;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct jvalue {
    pub _bindgen_data_: [u64; 1usize],
}
impl jvalue {
    pub unsafe fn z(&mut self) -> *mut jboolean {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn b(&mut self) -> *mut jbyte {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn c(&mut self) -> *mut jchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut jshort {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut jint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn j(&mut self) -> *mut jlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut jfloat {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d(&mut self) -> *mut jdouble {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn l(&mut self) -> *mut jobject {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for jvalue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum jobjectRefType {
    JNIInvalidRefType = 0,
    JNILocalRefType = 1,
    JNIGlobalRefType = 2,
    JNIWeakGlobalRefType = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JNINativeMethod {
    pub name: *const ::std::os::raw::c_char,
    pub signature: *const ::std::os::raw::c_char,
    pub fnPtr: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for JNINativeMethod {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type C_JNIEnv = *const JNINativeInterface;
pub type JNIEnv = *const JNINativeInterface;
pub type JavaVM = *const JNIInvokeInterface;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JNINativeInterface {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub reserved3: *mut ::std::os::raw::c_void,
    pub GetVersion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv)
                                              -> jint>,
    pub DefineClass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2:
                                                                    *const ::std::os::raw::c_char,
                                                                arg3: jobject,
                                                                arg4:
                                                                    *const jbyte,
                                                                arg5: jsize)
                                               -> jclass>,
    pub FindClass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2:
                                                                  *const ::std::os::raw::c_char)
                                             -> jclass>,
    pub FromReflectedMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jobject)
                                                       -> jmethodID>,
    pub FromReflectedField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jobject)
                                                      -> jfieldID>,
    pub ToReflectedMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          jboolean)
                                                     -> jobject>,
    pub GetSuperclass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jclass)
                                                 -> jclass>,
    pub IsAssignableFrom: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jclass,
                                                                     arg3:
                                                                         jclass)
                                                    -> jboolean>,
    pub ToReflectedField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jclass,
                                                                     arg3:
                                                                         jfieldID,
                                                                     arg4:
                                                                         jboolean)
                                                    -> jobject>,
    pub Throw: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv,
                                                          arg2: jthrowable)
                                         -> jint>,
    pub ThrowNew: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut JNIEnv,
                                                             arg2: jclass,
                                                             arg3:
                                                                 *const ::std::os::raw::c_char)
                                            -> jint>,
    pub ExceptionOccurred: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv)
                                                     -> jthrowable>,
    pub ExceptionDescribe: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv)>,
    pub ExceptionClear: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv)>,
    pub FatalError: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2:
                                                                   *const ::std::os::raw::c_char)>,
    pub PushLocalFrame: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2: jint)
                                                  -> jint>,
    pub PopLocalFrame: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject)
                                                 -> jobject>,
    pub NewGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject)
                                                -> jobject>,
    pub DeleteGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject)>,
    pub DeleteLocalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject)>,
    pub IsSameObject: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jobject)
                                                -> jboolean>,
    pub NewLocalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject)
                                               -> jobject>,
    pub EnsureLocalCapacity: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jint)
                                                       -> jint>,
    pub AllocObject: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jclass)
                                               -> jobject>,
    pub NewObject: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2: jclass,
                                                              arg3:
                                                                  jmethodID, ...)
                                             -> jobject>,
    pub NewObjectV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2: jclass,
                                                               arg3:
                                                                   jmethodID,
                                                               arg4: va_list)
                                              -> jobject>,
    pub NewObjectA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2: jclass,
                                                               arg3:
                                                                   jmethodID,
                                                               arg4:
                                                                   *mut jvalue)
                                              -> jobject>,
    pub GetObjectClass: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject)
                                                  -> jclass>,
    pub IsInstanceOf: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3: jclass)
                                                -> jboolean>,
    pub GetMethodID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jclass,
                                                                arg3:
                                                                    *const ::std::os::raw::c_char,
                                                                arg4:
                                                                    *const ::std::os::raw::c_char)
                                               -> jmethodID>,
    pub CallObjectMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID, ...)
                                                    -> jobject>,
    pub CallObjectMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          va_list)
                                                     -> jobject>,
    pub CallObjectMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          *mut jvalue)
                                                     -> jobject>,
    pub CallBooleanMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID, ...)
                                                     -> jboolean>,
    pub CallBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jobject,
                                                                       arg3:
                                                                           jmethodID,
                                                                       arg4:
                                                                           va_list)
                                                      -> jboolean>,
    pub CallBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jobject,
                                                                       arg3:
                                                                           jmethodID,
                                                                       arg4:
                                                                           *mut jvalue)
                                                      -> jboolean>,
    pub CallByteMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)
                                                  -> jbyte>,
    pub CallByteMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        va_list)
                                                   -> jbyte>,
    pub CallByteMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)
                                                   -> jbyte>,
    pub CallCharMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)
                                                  -> jchar>,
    pub CallCharMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        va_list)
                                                   -> jchar>,
    pub CallCharMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)
                                                   -> jchar>,
    pub CallShortMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID, ...)
                                                   -> jshort>,
    pub CallShortMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         va_list)
                                                    -> jshort>,
    pub CallShortMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         *mut jvalue)
                                                    -> jshort>,
    pub CallIntMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jmethodID, ...)
                                                 -> jint>,
    pub CallIntMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID,
                                                                   arg4:
                                                                       va_list)
                                                  -> jint>,
    pub CallIntMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID,
                                                                   arg4:
                                                                       *mut jvalue)
                                                  -> jint>,
    pub CallLongMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)
                                                  -> jlong>,
    pub CallLongMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        va_list)
                                                   -> jlong>,
    pub CallLongMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)
                                                   -> jlong>,
    pub CallFloatMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID, ...)
                                                   -> jfloat>,
    pub CallFloatMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         va_list)
                                                    -> jfloat>,
    pub CallFloatMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID,
                                                                     arg4:
                                                                         *mut jvalue)
                                                    -> jfloat>,
    pub CallDoubleMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject,
                                                                     arg3:
                                                                         jmethodID, ...)
                                                    -> jdouble>,
    pub CallDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          va_list)
                                                     -> jdouble>,
    pub CallDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jobject,
                                                                      arg3:
                                                                          jmethodID,
                                                                      arg4:
                                                                          *mut jvalue)
                                                     -> jdouble>,
    pub CallVoidMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jmethodID, ...)>,
    pub CallVoidMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        va_list)>,
    pub CallVoidMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jmethodID,
                                                                    arg4:
                                                                        *mut jvalue)>,
    pub CallNonvirtualObjectMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID, ...)
                                                              -> jobject>,
    pub CallNonvirtualObjectMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    va_list)
                                                               -> jobject>,
    pub CallNonvirtualObjectMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    *mut jvalue)
                                                               -> jobject>,
    pub CallNonvirtualBooleanMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID, ...)
                                                               -> jboolean>,
    pub CallNonvirtualBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                     *mut JNIEnv,
                                                                                 arg2:
                                                                                     jobject,
                                                                                 arg3:
                                                                                     jclass,
                                                                                 arg4:
                                                                                     jmethodID,
                                                                                 arg5:
                                                                                     va_list)
                                                                -> jboolean>,
    pub CallNonvirtualBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                     *mut JNIEnv,
                                                                                 arg2:
                                                                                     jobject,
                                                                                 arg3:
                                                                                     jclass,
                                                                                 arg4:
                                                                                     jmethodID,
                                                                                 arg5:
                                                                                     *mut jvalue)
                                                                -> jboolean>,
    pub CallNonvirtualByteMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)
                                                            -> jbyte>,
    pub CallNonvirtualByteMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  va_list)
                                                             -> jbyte>,
    pub CallNonvirtualByteMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)
                                                             -> jbyte>,
    pub CallNonvirtualCharMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)
                                                            -> jchar>,
    pub CallNonvirtualCharMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  va_list)
                                                             -> jchar>,
    pub CallNonvirtualCharMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)
                                                             -> jchar>,
    pub CallNonvirtualShortMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID, ...)
                                                             -> jshort>,
    pub CallNonvirtualShortMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   va_list)
                                                              -> jshort>,
    pub CallNonvirtualShortMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   *mut jvalue)
                                                              -> jshort>,
    pub CallNonvirtualIntMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jobject,
                                                                            arg3:
                                                                                jclass,
                                                                            arg4:
                                                                                jmethodID, ...)
                                                           -> jint>,
    pub CallNonvirtualIntMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID,
                                                                             arg5:
                                                                                 va_list)
                                                            -> jint>,
    pub CallNonvirtualIntMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID,
                                                                             arg5:
                                                                                 *mut jvalue)
                                                            -> jint>,
    pub CallNonvirtualLongMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)
                                                            -> jlong>,
    pub CallNonvirtualLongMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  va_list)
                                                             -> jlong>,
    pub CallNonvirtualLongMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)
                                                             -> jlong>,
    pub CallNonvirtualFloatMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID, ...)
                                                             -> jfloat>,
    pub CallNonvirtualFloatMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   va_list)
                                                              -> jfloat>,
    pub CallNonvirtualFloatMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID,
                                                                               arg5:
                                                                                   *mut jvalue)
                                                              -> jfloat>,
    pub CallNonvirtualDoubleMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jobject,
                                                                               arg3:
                                                                                   jclass,
                                                                               arg4:
                                                                                   jmethodID, ...)
                                                              -> jdouble>,
    pub CallNonvirtualDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    va_list)
                                                               -> jdouble>,
    pub CallNonvirtualDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jobject,
                                                                                arg3:
                                                                                    jclass,
                                                                                arg4:
                                                                                    jmethodID,
                                                                                arg5:
                                                                                    *mut jvalue)
                                                               -> jdouble>,
    pub CallNonvirtualVoidMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jobject,
                                                                             arg3:
                                                                                 jclass,
                                                                             arg4:
                                                                                 jmethodID, ...)>,
    pub CallNonvirtualVoidMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  va_list)>,
    pub CallNonvirtualVoidMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jobject,
                                                                              arg3:
                                                                                  jclass,
                                                                              arg4:
                                                                                  jmethodID,
                                                                              arg5:
                                                                                  *mut jvalue)>,
    pub GetFieldID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut JNIEnv,
                                                               arg2: jclass,
                                                               arg3:
                                                                   *const ::std::os::raw::c_char,
                                                               arg4:
                                                                   *const ::std::os::raw::c_char)
                                              -> jfieldID>,
    pub GetObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID)
                                                  -> jobject>,
    pub GetBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jfieldID)
                                                   -> jboolean>,
    pub GetByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID)
                                                -> jbyte>,
    pub GetCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID)
                                                -> jchar>,
    pub GetShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID)
                                                 -> jshort>,
    pub GetIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject,
                                                                arg3:
                                                                    jfieldID)
                                               -> jint>,
    pub GetLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID)
                                                -> jlong>,
    pub GetFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID)
                                                 -> jfloat>,
    pub GetDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID)
                                                  -> jdouble>,
    pub SetObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID,
                                                                   arg4:
                                                                       jobject)>,
    pub SetBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jobject,
                                                                    arg3:
                                                                        jfieldID,
                                                                    arg4:
                                                                        jboolean)>,
    pub SetByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID,
                                                                 arg4:
                                                                     jbyte)>,
    pub SetCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID,
                                                                 arg4:
                                                                     jchar)>,
    pub SetShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID,
                                                                  arg4:
                                                                      jshort)>,
    pub SetIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject,
                                                                arg3:
                                                                    jfieldID,
                                                                arg4: jint)>,
    pub SetLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject,
                                                                 arg3:
                                                                     jfieldID,
                                                                 arg4:
                                                                     jlong)>,
    pub SetFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2:
                                                                      jobject,
                                                                  arg3:
                                                                      jfieldID,
                                                                  arg4:
                                                                      jfloat)>,
    pub SetDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jobject,
                                                                   arg3:
                                                                       jfieldID,
                                                                   arg4:
                                                                       jdouble)>,
    pub GetStaticMethodID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          *const ::std::os::raw::c_char,
                                                                      arg4:
                                                                          *const ::std::os::raw::c_char)
                                                     -> jmethodID>,
    pub CallStaticObjectMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID, ...)
                                                          -> jobject>,
    pub CallStaticObjectMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                va_list)
                                                           -> jobject>,
    pub CallStaticObjectMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                *mut jvalue)
                                                           -> jobject>,
    pub CallStaticBooleanMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID, ...)
                                                           -> jboolean>,
    pub CallStaticBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jclass,
                                                                             arg3:
                                                                                 jmethodID,
                                                                             arg4:
                                                                                 va_list)
                                                            -> jboolean>,
    pub CallStaticBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jclass,
                                                                             arg3:
                                                                                 jmethodID,
                                                                             arg4:
                                                                                 *mut jvalue)
                                                            -> jboolean>,
    pub CallStaticByteMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)
                                                        -> jbyte>,
    pub CallStaticByteMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              va_list)
                                                         -> jbyte>,
    pub CallStaticByteMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)
                                                         -> jbyte>,
    pub CallStaticCharMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)
                                                        -> jchar>,
    pub CallStaticCharMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              va_list)
                                                         -> jchar>,
    pub CallStaticCharMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)
                                                         -> jchar>,
    pub CallStaticShortMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID, ...)
                                                         -> jshort>,
    pub CallStaticShortMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               va_list)
                                                          -> jshort>,
    pub CallStaticShortMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               *mut jvalue)
                                                          -> jshort>,
    pub CallStaticIntMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jmethodID, ...)
                                                       -> jint>,
    pub CallStaticIntMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID,
                                                                         arg4:
                                                                             va_list)
                                                        -> jint>,
    pub CallStaticIntMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID,
                                                                         arg4:
                                                                             *mut jvalue)
                                                        -> jint>,
    pub CallStaticLongMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)
                                                        -> jlong>,
    pub CallStaticLongMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              va_list)
                                                         -> jlong>,
    pub CallStaticLongMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)
                                                         -> jlong>,
    pub CallStaticFloatMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID, ...)
                                                         -> jfloat>,
    pub CallStaticFloatMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               va_list)
                                                          -> jfloat>,
    pub CallStaticFloatMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID,
                                                                           arg4:
                                                                               *mut jvalue)
                                                          -> jfloat>,
    pub CallStaticDoubleMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jclass,
                                                                           arg3:
                                                                               jmethodID, ...)
                                                          -> jdouble>,
    pub CallStaticDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                va_list)
                                                           -> jdouble>,
    pub CallStaticDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jclass,
                                                                            arg3:
                                                                                jmethodID,
                                                                            arg4:
                                                                                *mut jvalue)
                                                           -> jdouble>,
    pub CallStaticVoidMethod: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jmethodID, ...)>,
    pub CallStaticVoidMethodV: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              va_list)>,
    pub CallStaticVoidMethodA: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jmethodID,
                                                                          arg4:
                                                                              *mut jvalue)>,
    pub GetStaticFieldID: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jclass,
                                                                     arg3:
                                                                         *const ::std::os::raw::c_char,
                                                                     arg4:
                                                                         *const ::std::os::raw::c_char)
                                                    -> jfieldID>,
    pub GetStaticObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID)
                                                        -> jobject>,
    pub GetStaticBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jfieldID)
                                                         -> jboolean>,
    pub GetStaticByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID)
                                                      -> jbyte>,
    pub GetStaticCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID)
                                                      -> jchar>,
    pub GetStaticShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID)
                                                       -> jshort>,
    pub GetStaticIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          jfieldID)
                                                     -> jint>,
    pub GetStaticLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID)
                                                      -> jlong>,
    pub GetStaticFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID)
                                                       -> jfloat>,
    pub GetStaticDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID)
                                                        -> jdouble>,
    pub SetStaticObjectField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID,
                                                                         arg4:
                                                                             jobject)>,
    pub SetStaticBooleanField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jclass,
                                                                          arg3:
                                                                              jfieldID,
                                                                          arg4:
                                                                              jboolean)>,
    pub SetStaticByteField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID,
                                                                       arg4:
                                                                           jbyte)>,
    pub SetStaticCharField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID,
                                                                       arg4:
                                                                           jchar)>,
    pub SetStaticShortField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID,
                                                                        arg4:
                                                                            jshort)>,
    pub SetStaticIntField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass,
                                                                      arg3:
                                                                          jfieldID,
                                                                      arg4:
                                                                          jint)>,
    pub SetStaticLongField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jclass,
                                                                       arg3:
                                                                           jfieldID,
                                                                       arg4:
                                                                           jlong)>,
    pub SetStaticFloatField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jclass,
                                                                        arg3:
                                                                            jfieldID,
                                                                        arg4:
                                                                            jfloat)>,
    pub SetStaticDoubleField: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jclass,
                                                                         arg3:
                                                                             jfieldID,
                                                                         arg4:
                                                                             jdouble)>,
    pub NewString: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2:
                                                                  *const jchar,
                                                              arg3: jsize)
                                             -> jstring>,
    pub GetStringLength: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jstring)
                                                   -> jsize>,
    pub GetStringChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jstring,
                                                                   arg3:
                                                                       *mut jboolean)
                                                  -> *const jchar>,
    pub ReleaseStringChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jstring,
                                                                       arg3:
                                                                           *const jchar)>,
    pub NewStringUTF: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     *const ::std::os::raw::c_char)
                                                -> jstring>,
    pub GetStringUTFLength: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jstring)
                                                      -> jsize>,
    pub GetStringUTFChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jstring,
                                                                      arg3:
                                                                          *mut jboolean)
                                                     ->
                                                         *const ::std::os::raw::c_char>,
    pub ReleaseStringUTFChars: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jstring,
                                                                          arg3:
                                                                              *const ::std::os::raw::c_char)>,
    pub GetArrayLength: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jarray)
                                                  -> jsize>,
    pub NewObjectArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jsize,
                                                                   arg3:
                                                                       jclass,
                                                                   arg4:
                                                                       jobject)
                                                  -> jobjectArray>,
    pub GetObjectArrayElement: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jobjectArray,
                                                                          arg3:
                                                                              jsize)
                                                         -> jobject>,
    pub SetObjectArrayElement: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jobjectArray,
                                                                          arg3:
                                                                              jsize,
                                                                          arg4:
                                                                              jobject)>,
    pub NewBooleanArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jsize)
                                                   -> jbooleanArray>,
    pub NewByteArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2: jsize)
                                                -> jbyteArray>,
    pub NewCharArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2: jsize)
                                                -> jcharArray>,
    pub NewShortArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2: jsize)
                                                 -> jshortArray>,
    pub NewIntArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jsize)
                                               -> jintArray>,
    pub NewLongArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2: jsize)
                                                -> jlongArray>,
    pub NewFloatArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JNIEnv,
                                                                  arg2: jsize)
                                                 -> jfloatArray>,
    pub NewDoubleArray: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv,
                                                                   arg2:
                                                                       jsize)
                                                  -> jdoubleArray>,
    pub GetBooleanArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jbooleanArray,
                                                                            arg3:
                                                                                *mut jboolean)
                                                           -> *mut jboolean>,
    pub GetByteArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jbyteArray,
                                                                         arg3:
                                                                             *mut jboolean)
                                                        -> *mut jbyte>,
    pub GetCharArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jcharArray,
                                                                         arg3:
                                                                             *mut jboolean)
                                                        -> *mut jchar>,
    pub GetShortArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jshortArray,
                                                                          arg3:
                                                                              *mut jboolean)
                                                         -> *mut jshort>,
    pub GetIntArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jintArray,
                                                                        arg3:
                                                                            *mut jboolean)
                                                       -> *mut jint>,
    pub GetLongArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jlongArray,
                                                                         arg3:
                                                                             *mut jboolean)
                                                        -> *mut jlong>,
    pub GetFloatArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jfloatArray,
                                                                          arg3:
                                                                              *mut jboolean)
                                                         -> *mut jfloat>,
    pub GetDoubleArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jdoubleArray,
                                                                           arg3:
                                                                               *mut jboolean)
                                                          -> *mut jdouble>,
    pub ReleaseBooleanArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JNIEnv,
                                                                                arg2:
                                                                                    jbooleanArray,
                                                                                arg3:
                                                                                    *mut jboolean,
                                                                                arg4:
                                                                                    jint)>,
    pub ReleaseByteArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jbyteArray,
                                                                             arg3:
                                                                                 *mut jbyte,
                                                                             arg4:
                                                                                 jint)>,
    pub ReleaseCharArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jcharArray,
                                                                             arg3:
                                                                                 *mut jchar,
                                                                             arg4:
                                                                                 jint)>,
    pub ReleaseShortArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jshortArray,
                                                                              arg3:
                                                                                  *mut jshort,
                                                                              arg4:
                                                                                  jint)>,
    pub ReleaseIntArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jintArray,
                                                                            arg3:
                                                                                *mut jint,
                                                                            arg4:
                                                                                jint)>,
    pub ReleaseLongArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut JNIEnv,
                                                                             arg2:
                                                                                 jlongArray,
                                                                             arg3:
                                                                                 *mut jlong,
                                                                             arg4:
                                                                                 jint)>,
    pub ReleaseFloatArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jfloatArray,
                                                                              arg3:
                                                                                  *mut jfloat,
                                                                              arg4:
                                                                                  jint)>,
    pub ReleaseDoubleArrayElements: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut JNIEnv,
                                                                               arg2:
                                                                                   jdoubleArray,
                                                                               arg3:
                                                                                   *mut jdouble,
                                                                               arg4:
                                                                                   jint)>,
    pub GetBooleanArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jbooleanArray,
                                                                          arg3:
                                                                              jsize,
                                                                          arg4:
                                                                              jsize,
                                                                          arg5:
                                                                              *mut jboolean)>,
    pub GetByteArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jbyteArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut jbyte)>,
    pub GetCharArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jcharArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut jchar)>,
    pub GetShortArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jshortArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *mut jshort)>,
    pub GetIntArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jintArray,
                                                                      arg3:
                                                                          jsize,
                                                                      arg4:
                                                                          jsize,
                                                                      arg5:
                                                                          *mut jint)>,
    pub GetLongArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jlongArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut jlong)>,
    pub GetFloatArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jfloatArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *mut jfloat)>,
    pub GetDoubleArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jdoubleArray,
                                                                         arg3:
                                                                             jsize,
                                                                         arg4:
                                                                             jsize,
                                                                         arg5:
                                                                             *mut jdouble)>,
    pub SetBooleanArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jbooleanArray,
                                                                          arg3:
                                                                              jsize,
                                                                          arg4:
                                                                              jsize,
                                                                          arg5:
                                                                              *const jboolean)>,
    pub SetByteArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jbyteArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *const jbyte)>,
    pub SetCharArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jcharArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *const jchar)>,
    pub SetShortArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jshortArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *const jshort)>,
    pub SetIntArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jintArray,
                                                                      arg3:
                                                                          jsize,
                                                                      arg4:
                                                                          jsize,
                                                                      arg5:
                                                                          *const jint)>,
    pub SetLongArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jlongArray,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *const jlong)>,
    pub SetFloatArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jfloatArray,
                                                                        arg3:
                                                                            jsize,
                                                                        arg4:
                                                                            jsize,
                                                                        arg5:
                                                                            *const jfloat)>,
    pub SetDoubleArrayRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut JNIEnv,
                                                                         arg2:
                                                                             jdoubleArray,
                                                                         arg3:
                                                                             jsize,
                                                                         arg4:
                                                                             jsize,
                                                                         arg5:
                                                                             *const jdouble)>,
    pub RegisterNatives: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jclass,
                                                                    arg3:
                                                                        *const JNINativeMethod,
                                                                    arg4:
                                                                        jint)
                                                   -> jint>,
    pub UnregisterNatives: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jclass)
                                                     -> jint>,
    pub MonitorEnter: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut JNIEnv,
                                                                 arg2:
                                                                     jobject)
                                                -> jint>,
    pub MonitorExit: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut JNIEnv,
                                                                arg2: jobject)
                                               -> jint>,
    pub GetJavaVM: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut JNIEnv,
                                                              arg2:
                                                                  *mut *mut JavaVM)
                                             -> jint>,
    pub GetStringRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut JNIEnv,
                                                                    arg2:
                                                                        jstring,
                                                                    arg3:
                                                                        jsize,
                                                                    arg4:
                                                                        jsize,
                                                                    arg5:
                                                                        *mut jchar)>,
    pub GetStringUTFRegion: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut JNIEnv,
                                                                       arg2:
                                                                           jstring,
                                                                       arg3:
                                                                           jsize,
                                                                       arg4:
                                                                           jsize,
                                                                       arg5:
                                                                           *mut ::std::os::raw::c_char)>,
    pub GetPrimitiveArrayCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *mut JNIEnv,
                                                                              arg2:
                                                                                  jarray,
                                                                              arg3:
                                                                                  *mut jboolean)
                                                             ->
                                                                 *mut ::std::os::raw::c_void>,
    pub ReleasePrimitiveArrayCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut JNIEnv,
                                                                                  arg2:
                                                                                      jarray,
                                                                                  arg3:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  arg4:
                                                                                      jint)>,
    pub GetStringCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut JNIEnv,
                                                                      arg2:
                                                                          jstring,
                                                                      arg3:
                                                                          *mut jboolean)
                                                     -> *const jchar>,
    pub ReleaseStringCritical: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut JNIEnv,
                                                                          arg2:
                                                                              jstring,
                                                                          arg3:
                                                                              *const jchar)>,
    pub NewWeakGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject)
                                                    -> jweak>,
    pub DeleteWeakGlobalRef: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            jweak)>,
    pub ExceptionCheck: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut JNIEnv)
                                                  -> jboolean>,
    pub NewDirectByteBuffer: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JNIEnv,
                                                                        arg2:
                                                                            *mut ::std::os::raw::c_void,
                                                                        arg3:
                                                                            jlong)
                                                       -> jobject>,
    pub GetDirectBufferAddress: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               *mut JNIEnv,
                                                                           arg2:
                                                                               jobject)
                                                          ->
                                                              *mut ::std::os::raw::c_void>,
    pub GetDirectBufferCapacity: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut JNIEnv,
                                                                            arg2:
                                                                                jobject)
                                                           -> jlong>,
    pub GetObjectRefType: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut JNIEnv,
                                                                     arg2:
                                                                         jobject)
                                                    -> jobjectRefType>,
}
impl ::std::default::Default for JNINativeInterface {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _JNIEnv {
    pub functions: *const JNINativeInterface,
}
impl ::std::default::Default for _JNIEnv {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JNIInvokeInterface {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub DestroyJavaVM: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut JavaVM)
                                                 -> jint>,
    pub AttachCurrentThread: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JavaVM,
                                                                        arg2:
                                                                            *mut *mut JNIEnv,
                                                                        arg3:
                                                                            *mut ::std::os::raw::c_void)
                                                       -> jint>,
    pub DetachCurrentThread: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut JavaVM)
                                                       -> jint>,
    pub GetEnv: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JavaVM,
                                                           arg2:
                                                               *mut *mut ::std::os::raw::c_void,
                                                           arg3: jint)
                                          -> jint>,
    pub AttachCurrentThreadAsDaemon: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    *mut JavaVM,
                                                                                arg2:
                                                                                    *mut *mut JNIEnv,
                                                                                arg3:
                                                                                    *mut ::std::os::raw::c_void)
                                                               -> jint>,
}
impl ::std::default::Default for JNIInvokeInterface {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _JavaVM {
    pub functions: *const JNIInvokeInterface,
}
impl ::std::default::Default for _JavaVM {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JavaVMAttachArgs {
    pub version: jint,
    pub name: *const ::std::os::raw::c_char,
    pub group: jobject,
}
impl ::std::default::Default for JavaVMAttachArgs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JavaVMOption {
    pub optionString: *const ::std::os::raw::c_char,
    pub extraInfo: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for JavaVMOption {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JavaVMInitArgs {
    pub version: jint,
    pub nOptions: jint,
    pub options: *mut JavaVMOption,
    pub ignoreUnrecognized: jboolean,
}
impl ::std::default::Default for JavaVMInitArgs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl ::std::default::Default for max_align_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __int_fast8_t = __int32_t;
pub type __uint_fast8_t = __uint32_t;
pub type __int_fast16_t = __int32_t;
pub type __uint_fast16_t = __uint32_t;
pub type __int_fast32_t = __int32_t;
pub type __uint_fast32_t = __uint32_t;
pub type __int_fast64_t = __int64_t;
pub type __uint_fast64_t = __uint64_t;
pub type __intptr_t = ::std::os::raw::c_int;
pub type __uintptr_t = ::std::os::raw::c_uint;
pub type __intmax_t = __int64_t;
pub type __uintmax_t = __uint64_t;
pub type __register_t = __int32_t;
pub type __vaddr_t = ::std::os::raw::c_ulong;
pub type __paddr_t = ::std::os::raw::c_ulong;
pub type __vsize_t = ::std::os::raw::c_ulong;
pub type __psize_t = ::std::os::raw::c_ulong;
pub type __clock_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __ptrdiff_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_int;
pub type __timer_t = ::std::os::raw::c_int;
pub type __va_list = __builtin_va_list;
pub type __wchar_t = ::std::os::raw::c_int;
pub type __wint_t = ::std::os::raw::c_int;
pub type __rune_t = ::std::os::raw::c_int;
pub type __wctrans_t = *mut ::std::os::raw::c_void;
pub type __wctype_t = *mut ::std::os::raw::c_void;
pub type __cpuid_t = ::std::os::raw::c_ulong;
pub type __dev_t = __int32_t;
pub type __fixpt_t = __uint32_t;
pub type __gid_t = __uint32_t;
pub type __id_t = __uint32_t;
pub type __in_addr_t = __uint32_t;
pub type __in_port_t = __uint16_t;
pub type __ino_t = __uint32_t;
pub type __key_t = ::std::os::raw::c_long;
pub type __mode_t = __uint32_t;
pub type __nlink_t = __uint32_t;
pub type __pid_t = __int32_t;
pub type __rlim_t = __uint64_t;
pub type __sa_family_t = __uint16_t;
pub type __segsz_t = __int32_t;
pub type __socklen_t = __uint32_t;
pub type __swblk_t = __int32_t;
pub type __uid_t = __uint32_t;
pub type __useconds_t = __uint32_t;
pub type __suseconds_t = __int32_t;
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t {
    pub _bindgen_data_: [u64; 16usize],
}
impl __mbstate_t {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __mbstateL(&mut self) -> *mut __int64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type int8_t = i8;
pub type uint8_t = u8;
pub type int16_t = i16;
pub type uint16_t = u16;
pub type int32_t = i32;
pub type uint32_t = u32;
pub type int64_t = i64;
pub type uint64_t = u64;
pub type int_least8_t = int8_t;
pub type int_fast8_t = int8_t;
pub type uint_least8_t = uint8_t;
pub type uint_fast8_t = uint8_t;
pub type int_least16_t = int16_t;
pub type int_fast16_t = int32_t;
pub type uint_least16_t = uint16_t;
pub type uint_fast16_t = uint32_t;
pub type int_least32_t = int32_t;
pub type int_fast32_t = int32_t;
pub type uint_least32_t = uint32_t;
pub type uint_fast32_t = uint32_t;
pub type int_least64_t = int64_t;
pub type int_fast64_t = int64_t;
pub type uint_least64_t = uint64_t;
pub type uint_fast64_t = uint64_t;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type uintmax_t = uint64_t;
pub type intmax_t = int64_t;
pub type ssize_t = isize;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mallinfo {
    pub arena: size_t,
    pub ordblks: size_t,
    pub smblks: size_t,
    pub hblks: size_t,
    pub hblkhd: size_t,
    pub usmblks: size_t,
    pub fsmblks: size_t,
    pub uordblks: size_t,
    pub fordblks: size_t,
    pub keepcost: size_t,
}
impl ::std::default::Default for mallinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __kernel_fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_ino_t = ::std::os::raw::c_ulong;
pub type __kernel_mode_t = ::std::os::raw::c_ushort;
pub type __kernel_nlink_t = ::std::os::raw::c_ushort;
pub type __kernel_off_t = ::std::os::raw::c_long;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_ushort;
pub type __kernel_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_size_t = ::std::os::raw::c_uint;
pub type __kernel_ssize_t = ::std::os::raw::c_int;
pub type __kernel_ptrdiff_t = ::std::os::raw::c_int;
pub type __kernel_time_t = ::std::os::raw::c_long;
pub type __kernel_suseconds_t = ::std::os::raw::c_long;
pub type __kernel_clock_t = ::std::os::raw::c_long;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ushort;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __kernel_fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __kernel_fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type umode_t = ::std::os::raw::c_ushort;
pub type __s8 = ::std::os::raw::c_char;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ustat {
    pub f_tfree: __kernel_daddr_t,
    pub f_tinode: __kernel_ino_t,
    pub f_fname: [::std::os::raw::c_char; 6usize],
    pub f_fpack: [::std::os::raw::c_char; 6usize],
}
impl ::std::default::Default for ustat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_blkcnt_t = ::std::os::raw::c_ulong;
pub type __kernel_blksize_t = ::std::os::raw::c_ulong;
pub type __kernel_fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __kernel_fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __kernel_id_t = ::std::os::raw::c_uint;
pub type __kernel_dev_t = __u32;
pub type blkcnt_t = __kernel_blkcnt_t;
pub type blksize_t = __kernel_blksize_t;
pub type clock_t = __kernel_clock_t;
pub type clockid_t = __kernel_clockid_t;
pub type dev_t = __kernel_dev_t;
pub type fsblkcnt_t = __kernel_fsblkcnt_t;
pub type fsfilcnt_t = __kernel_fsfilcnt_t;
pub type gid_t = __kernel_gid32_t;
pub type id_t = __kernel_id_t;
pub type ino_t = __kernel_ino_t;
pub type key_t = __kernel_key_t;
pub type mode_t = __kernel_mode_t;
pub type nlink_t = __kernel_nlink_t;
pub type off_t = __kernel_off_t;
pub type loff_t = __kernel_loff_t;
pub type off64_t = loff_t;
pub type pid_t = __kernel_pid_t;
pub type suseconds_t = __kernel_suseconds_t;
pub type time_t = __kernel_time_t;
pub type uid_t = __kernel_uid32_t;
pub type useconds_t = ::std::os::raw::c_long;
pub type daddr_t = __kernel_daddr_t;
pub type timer_t = __kernel_timer_t;
pub type mqd_t = __kernel_mqd_t;
pub type caddr_t = __kernel_caddr_t;
pub type uint_t = ::std::os::raw::c_uint;
pub type uint_ = ::std::os::raw::c_uint;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type u_int32_t = uint32_t;
pub type u_int16_t = uint16_t;
pub type u_int8_t = uint8_t;
pub type u_int64_t = uint64_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::default::Default for div_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::default::Default for ldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::default::Default for lldiv_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum context_ { }
pub type context = context_;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum eye { LEFT_EYE = 0, RIGHT_EYE = 1, NUM_EYES = 2, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum viewer_type { VIEWER_TYPE_CARDBOARD = 0, VIEWER_TYPE_DAYDREAM = 1, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct version_ {
    pub major: int32_t,
    pub minor: int32_t,
    pub patch: int32_t,
}
impl ::std::default::Default for version_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type version = version_;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct sizei {
    pub width: int32_t,
    pub height: int32_t,
}
impl ::std::default::Default for sizei {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct recti {
    pub left: int32_t,
    pub right: int32_t,
    pub bottom: int32_t,
    pub top: int32_t,
}
impl ::std::default::Default for recti {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct rectf {
    pub left: f32,
    pub right: f32,
    pub bottom: f32,
    pub top: f32,
}
impl ::std::default::Default for rectf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct vec2f {
    pub x: f32,
    pub y: f32,
}
impl ::std::default::Default for vec2f {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct vec3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
impl ::std::default::Default for vec3f {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct mat4f {
    pub m: [[f32; 4usize]; 4usize],
}
impl ::std::default::Default for mat4f {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct quatf {
    pub qx: f32,
    pub qy: f32,
    pub qz: f32,
    pub qw: f32,
}
impl ::std::default::Default for quatf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct clock_time_point {
    pub monotonic_system_time_nanos: int64_t,
}
impl ::std::default::Default for clock_time_point {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum buffer_viewport_ { }
pub type buffer_viewport = buffer_viewport_;
pub enum buffer_viewport_list_ { }
pub type buffer_viewport_list = buffer_viewport_list_;
pub enum buffer_spec_ { }
pub type buffer_spec = buffer_spec_;
pub enum swap_chain_ { }
pub type swap_chain = swap_chain_;
pub enum frame_ { }
pub type frame = frame_;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum error {
    ERROR_NONE = 0,
    ERROR_CONTROLLER_CREATE_FAILED = 2,
    ERROR_NO_FRAME_AVAILABLE = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed1 {
    CONTROLLER_ENABLE_ORIENTATION = 1,
    CONTROLLER_ENABLE_TOUCH = 2,
    CONTROLLER_ENABLE_GYRO = 4,
    CONTROLLER_ENABLE_ACCEL = 8,
    CONTROLLER_ENABLE_GESTURES = 16,
    CONTROLLER_ENABLE_POSE_PREDICTION = 32,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum controller_api_status {
    CONTROLLER_API_OK = 0,
    CONTROLLER_API_UNSUPPORTED = 1,
    CONTROLLER_API_NOT_AUTHORIZED = 2,
    CONTROLLER_API_UNAVAILABLE = 3,
    CONTROLLER_API_SERVICE_OBSOLETE = 4,
    CONTROLLER_API_CLIENT_OBSOLETE = 5,
    CONTROLLER_API_MALFUNCTION = 6,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum controller_connection_state {
    CONTROLLER_DISCONNECTED = 0,
    CONTROLLER_SCANNING = 1,
    CONTROLLER_CONNECTING = 2,
    CONTROLLER_CONNECTED = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum controller_button {
    CONTROLLER_BUTTON_NONE = 0,
    CONTROLLER_BUTTON_CLICK = 1,
    CONTROLLER_BUTTON_HOME = 2,
    CONTROLLER_BUTTON_APP = 3,
    CONTROLLER_BUTTON_VOLUME_UP = 4,
    CONTROLLER_BUTTON_VOLUME_DOWN = 5,
    CONTROLLER_BUTTON_COUNT = 6,
}
pub enum controller_state_ { }
pub type controller_state = controller_state_;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum audio_rendering_mode {
    AUDIO_RENDERING_STEREO_PANNING = 0,
    AUDIO_RENDERING_BINAURAL_LOW_QUALITY = 1,
    AUDIO_RENDERING_BINAURAL_HIGH_QUALITY = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum audio_material_type {
    AUDIO_MATERIAL_TRANSPARENT = 0,
    AUDIO_MATERIAL_ACOUSTIC_CEILING_TILES = 1,
    AUDIO_MATERIAL_BRICK_BARE = 2,
    AUDIO_MATERIAL_BRICK_PAINTED = 3,
    AUDIO_MATERIAL_CONCRETE_BLOCK_COARSE = 4,
    AUDIO_MATERIAL_CONCRETE_BLOCK_PAINTED = 5,
    AUDIO_MATERIAL_CURTAIN_HEAVY = 6,
    AUDIO_MATERIAL_FIBER_GLASS_INSULATION = 7,
    AUDIO_MATERIAL_GLASS_THIN = 8,
    AUDIO_MATERIAL_GLASS_THICK = 9,
    AUDIO_MATERIAL_GRASS = 10,
    AUDIO_MATERIAL_LINOLEUM_ON_CONCRETE = 11,
    AUDIO_MATERIAL_MARBLE = 12,
    AUDIO_MATERIAL_METAL = 13,
    AUDIO_MATERIAL_PARQUET_ON_CONCRETE = 14,
    AUDIO_MATERIAL_PLASTER_ROUGH = 15,
    AUDIO_MATERIAL_PLASTER_SMOOTH = 16,
    AUDIO_MATERIAL_PLYWOOD_PANEL = 17,
    AUDIO_MATERIAL_POLISHED_CONCRETE_OR_TILE = 18,
    AUDIO_MATERIAL_SHEET_ROCK = 19,
    AUDIO_MATERIAL_WATER_OR_ICE_SURFACE = 20,
    AUDIO_MATERIAL_WOOD_CEILING = 21,
    AUDIO_MATERIAL_WOOD_PANEL = 22,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum audio_distance_rolloff_type {
    AUDIO_ROLLOFF_LOGARITHMIC = 0,
    AUDIO_ROLLOFF_LINEAR = 1,
    AUDIO_ROLLOFF_NONE = 2,
}
pub type audio_source_id = int32_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum color_format_type {
    COLOR_FORMAT_RGBA_8888 = 0,
    COLOR_FORMAT_RGB_565 = 1,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum depth_stencil_format_type {
    DEPTH_STENCIL_FORMAT_NONE = 255,
    DEPTH_STENCIL_FORMAT_DEPTH_16 = 0,
    DEPTH_STENCIL_FORMAT_DEPTH_24 = 1,
    DEPTH_STENCIL_FORMAT_DEPTH_24_STENCIL_8 = 2,
    DEPTH_STENCIL_FORMAT_DEPTH_32_F = 3,
    DEPTH_STENCIL_FORMAT_DEPTH_32_F_STENCIL_8 = 4,
    DEPTH_STENCIL_FORMAT_STENCIL_8 = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum reprojection { REPROJECTION_NONE = 0, REPROJECTION_FULL = 1, }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum controller_handedness {
    CONTROLLER_RIGHT_HANDED = 0,
    CONTROLLER_LEFT_HANDED = 1,
}
pub enum user_prefs_ { }
pub type user_prefs = user_prefs_;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "gvr", kind = "dylib")]
extern "C" {
    pub fn JNI_OnLoad(vm: *mut JavaVM, reserved: *mut ::std::os::raw::c_void)
     -> jint;
    pub fn JNI_OnUnload(vm: *mut JavaVM,
                        reserved: *mut ::std::os::raw::c_void);
    pub fn malloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(arg1: size_t, arg2: size_t) -> *mut ::std::os::raw::c_void;
    pub fn realloc(arg1: *mut ::std::os::raw::c_void, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(arg1: *mut ::std::os::raw::c_void);
    pub fn memalign(alignment: size_t, bytesize: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn malloc_usable_size(arg1: *const ::std::os::raw::c_void) -> size_t;
    pub fn valloc(bytesize: size_t) -> *mut ::std::os::raw::c_void;
    pub fn pvalloc(bytesize: size_t) -> *mut ::std::os::raw::c_void;
    pub fn mallinfo() -> mallinfo;
    pub fn memccpy(arg1: *mut ::std::os::raw::c_void,
                   arg2: *const ::std::os::raw::c_void,
                   arg3: ::std::os::raw::c_int, arg4: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memchr(arg1: *const ::std::os::raw::c_void,
                  arg2: ::std::os::raw::c_int, arg3: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memrchr(arg1: *const ::std::os::raw::c_void,
                   arg2: ::std::os::raw::c_int, arg3: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcmp(arg1: *const ::std::os::raw::c_void,
                  arg2: *const ::std::os::raw::c_void, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn memcpy(arg1: *mut ::std::os::raw::c_void,
                  arg2: *const ::std::os::raw::c_void, arg3: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmove(arg1: *mut ::std::os::raw::c_void,
                   arg2: *const ::std::os::raw::c_void, arg3: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset(arg1: *mut ::std::os::raw::c_void,
                  arg2: ::std::os::raw::c_int, arg3: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmem(arg1: *const ::std::os::raw::c_void, arg2: size_t,
                  arg3: *const ::std::os::raw::c_void, arg4: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memswap(arg1: *mut ::std::os::raw::c_void,
                   arg2: *mut ::std::os::raw::c_void, arg3: size_t);
    pub fn index(arg1: *const ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(arg1: *const ::std::os::raw::c_char,
                  arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strchr(arg1: *const ::std::os::raw::c_char,
                  arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(arg1: *const ::std::os::raw::c_char,
                   arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strlen(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strcmp(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strcpy(arg1: *mut ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strcat(arg1: *mut ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strcasecmp(arg1: *const ::std::os::raw::c_char,
                      arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncasecmp(arg1: *const ::std::os::raw::c_char,
                       arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn strdup(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strstr(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strcasestr(haystack: *const ::std::os::raw::c_char,
                      needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok(arg1: *mut ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(errnum: ::std::os::raw::c_int,
                      buf: *mut ::std::os::raw::c_char, n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strnlen(arg1: *const ::std::os::raw::c_char, arg2: size_t)
     -> size_t;
    pub fn strncat(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strndup(arg1: *const ::std::os::raw::c_char, arg2: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strncmp(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn strncpy(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strlcat(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn strlcpy(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn strcspn(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strpbrk(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strsep(arg1: *mut *mut ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strspn(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
    pub fn strsignal(sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strcoll(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strxfrm(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_ulong;
    pub fn bcmp(arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn exit(arg1: ::std::os::raw::c_int);
    pub fn abort();
    pub fn atexit(arg1: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn getenv(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strtol(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoll(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
    pub fn strtoul(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoull(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut *mut ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn posix_memalign(memptr: *mut *mut ::std::os::raw::c_void,
                          alignment: size_t, size: size_t)
     -> ::std::os::raw::c_int;
    pub fn strtod(nptr: *const ::std::os::raw::c_char,
                  endptr: *mut *mut ::std::os::raw::c_char) -> f64;
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn atol(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn realpath(path: *const ::std::os::raw::c_char,
                    resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(string: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn bsearch(key: *const ::std::os::raw::c_void,
                   base0: *const ::std::os::raw::c_void, nmemb: size_t,
                   size: size_t,
                   compar:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                 arg3: size_t,
                 arg4:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn erand48(xsubi: *mut ::std::os::raw::c_ushort) -> f64;
    pub fn drand48() -> f64;
    pub fn srand48(arg1: ::std::os::raw::c_long);
    pub fn arc4random() -> ::std::os::raw::c_uint;
    pub fn arc4random_stir();
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar,
                                arg2: ::std::os::raw::c_int);
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ptsname(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn ptsname_r(arg1: ::std::os::raw::c_int,
                     arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn getpt() -> ::std::os::raw::c_int;
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long)
     -> ldiv_t;
    pub fn lldiv(arg1: ::std::os::raw::c_longlong,
                 arg2: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn mblen(arg1: *const ::std::os::raw::c_char, arg2: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                    arg3: size_t) -> size_t;
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                  arg3: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t,
                    arg3: size_t) -> size_t;
    #[link_name = "gvr_create"]
    pub fn create(env: *mut JNIEnv, app_context: jobject,
                  class_loader: jobject) -> *mut context;
    #[link_name = "gvr_get_version"]
    pub fn get_version() -> version;
    #[link_name = "gvr_get_version_string"]
    pub fn get_version_string() -> *const ::std::os::raw::c_char;
    #[link_name = "gvr_get_error"]
    pub fn get_error(gvr: *mut context) -> int32_t;
    #[link_name = "gvr_clear_error"]
    pub fn clear_error(gvr: *mut context) -> int32_t;
    #[link_name = "gvr_get_error_string"]
    pub fn get_error_string(error_code: int32_t)
     -> *const ::std::os::raw::c_char;
    #[link_name = "gvr_get_user_prefs"]
    pub fn get_user_prefs(gvr: *mut context) -> *const user_prefs;
    #[link_name = "gvr_user_prefs_get_controller_handedness"]
    pub fn user_prefs_get_controller_handedness(user_prefs: *const user_prefs)
     -> int32_t;
    #[link_name = "gvr_destroy"]
    pub fn destroy(gvr: *mut *mut context);
    #[link_name = "gvr_initialize_gl"]
    pub fn initialize_gl(gvr: *mut context);
    #[link_name = "gvr_get_async_reprojection_enabled"]
    pub fn get_async_reprojection_enabled(gvr: *const context) -> u8;
    #[link_name = "gvr_get_recommended_buffer_viewports"]
    pub fn get_recommended_buffer_viewports(gvr: *const context,
                                            viewport_list:
                                                *mut buffer_viewport_list);
    #[link_name = "gvr_get_screen_buffer_viewports"]
    pub fn get_screen_buffer_viewports(gvr: *const context,
                                       viewport_list:
                                           *mut buffer_viewport_list);
    #[link_name = "gvr_get_maximum_effective_render_target_size"]
    pub fn get_maximum_effective_render_target_size(gvr: *const context)
     -> sizei;
    #[link_name = "gvr_get_screen_target_size"]
    pub fn get_screen_target_size(gvr: *const context) -> sizei;
    #[link_name = "gvr_set_surface_size"]
    pub fn set_surface_size(gvr: *mut context, surface_size_pixels: sizei);
    #[link_name = "gvr_distort_to_screen"]
    pub fn distort_to_screen(gvr: *mut context, texture_id: int32_t,
                             viewport_list: *const buffer_viewport_list,
                             head_space_from_start_space: mat4f,
                             target_presentation_time: clock_time_point);
    #[link_name = "gvr_buffer_viewport_create"]
    pub fn buffer_viewport_create(gvr: *mut context) -> *mut buffer_viewport;
    #[link_name = "gvr_buffer_viewport_destroy"]
    pub fn buffer_viewport_destroy(viewport: *mut *mut buffer_viewport);
    #[link_name = "gvr_buffer_viewport_get_source_uv"]
    pub fn buffer_viewport_get_source_uv(viewport: *const buffer_viewport)
     -> rectf;
    #[link_name = "gvr_buffer_viewport_set_source_uv"]
    pub fn buffer_viewport_set_source_uv(viewport: *mut buffer_viewport,
                                         uv: rectf);
    #[link_name = "gvr_buffer_viewport_get_source_fov"]
    pub fn buffer_viewport_get_source_fov(viewport: *const buffer_viewport)
     -> rectf;
    #[link_name = "gvr_buffer_viewport_set_source_fov"]
    pub fn buffer_viewport_set_source_fov(viewport: *mut buffer_viewport,
                                          fov: rectf);
    #[link_name = "gvr_buffer_viewport_get_target_eye"]
    pub fn buffer_viewport_get_target_eye(viewport: *const buffer_viewport)
     -> int32_t;
    #[link_name = "gvr_buffer_viewport_set_target_eye"]
    pub fn buffer_viewport_set_target_eye(viewport: *mut buffer_viewport,
                                          index: int32_t);
    #[link_name = "gvr_buffer_viewport_get_source_buffer_index"]
    pub fn buffer_viewport_get_source_buffer_index(viewport:
                                                       *const buffer_viewport)
     -> int32_t;
    #[link_name = "gvr_buffer_viewport_set_source_buffer_index"]
    pub fn buffer_viewport_set_source_buffer_index(viewport:
                                                       *mut buffer_viewport,
                                                   buffer_index: int32_t);
    #[link_name = "gvr_buffer_viewport_get_external_surface_id"]
    pub fn buffer_viewport_get_external_surface_id(viewport:
                                                       *const buffer_viewport)
     -> int32_t;
    #[link_name = "gvr_buffer_viewport_set_external_surface_id"]
    pub fn buffer_viewport_set_external_surface_id(viewport:
                                                       *mut buffer_viewport,
                                                   external_surface_id:
                                                       int32_t);
    #[link_name = "gvr_buffer_viewport_get_reprojection"]
    pub fn buffer_viewport_get_reprojection(viewport: *const buffer_viewport)
     -> int32_t;
    #[link_name = "gvr_buffer_viewport_set_reprojection"]
    pub fn buffer_viewport_set_reprojection(viewport: *mut buffer_viewport,
                                            reprojection: int32_t);
    #[link_name = "gvr_buffer_viewport_equal"]
    pub fn buffer_viewport_equal(a: *const buffer_viewport,
                                 b: *const buffer_viewport) -> u8;
    #[link_name = "gvr_buffer_viewport_list_create"]
    pub fn buffer_viewport_list_create(gvr: *const context)
     -> *mut buffer_viewport_list;
    #[link_name = "gvr_buffer_viewport_list_destroy"]
    pub fn buffer_viewport_list_destroy(viewport_list:
                                            *mut *mut buffer_viewport_list);
    #[link_name = "gvr_buffer_viewport_list_get_size"]
    pub fn buffer_viewport_list_get_size(viewport_list:
                                             *const buffer_viewport_list)
     -> size_t;
    #[link_name = "gvr_buffer_viewport_list_get_item"]
    pub fn buffer_viewport_list_get_item(viewport_list:
                                             *const buffer_viewport_list,
                                         index: size_t,
                                         viewport: *mut buffer_viewport);
    #[link_name = "gvr_buffer_viewport_list_set_item"]
    pub fn buffer_viewport_list_set_item(viewport_list:
                                             *mut buffer_viewport_list,
                                         index: size_t,
                                         viewport: *const buffer_viewport);
    #[link_name = "gvr_buffer_spec_create"]
    pub fn buffer_spec_create(gvr: *mut context) -> *mut buffer_spec;
    #[link_name = "gvr_buffer_spec_destroy"]
    pub fn buffer_spec_destroy(spec: *mut *mut buffer_spec);
    #[link_name = "gvr_buffer_spec_get_size"]
    pub fn buffer_spec_get_size(spec: *const buffer_spec) -> sizei;
    #[link_name = "gvr_buffer_spec_set_size"]
    pub fn buffer_spec_set_size(spec: *mut buffer_spec, size: sizei);
    #[link_name = "gvr_buffer_spec_get_samples"]
    pub fn buffer_spec_get_samples(spec: *const buffer_spec) -> int32_t;
    #[link_name = "gvr_buffer_spec_set_samples"]
    pub fn buffer_spec_set_samples(spec: *mut buffer_spec,
                                   num_samples: int32_t);
    #[link_name = "gvr_buffer_spec_set_color_format"]
    pub fn buffer_spec_set_color_format(spec: *mut buffer_spec,
                                        color_format: int32_t);
    #[link_name = "gvr_buffer_spec_set_depth_stencil_format"]
    pub fn buffer_spec_set_depth_stencil_format(spec: *mut buffer_spec,
                                                depth_stencil_format:
                                                    int32_t);
    #[link_name = "gvr_swap_chain_create"]
    pub fn swap_chain_create(gvr: *mut context,
                             buffers: *mut *const buffer_spec, count: int32_t)
     -> *mut swap_chain;
    #[link_name = "gvr_swap_chain_destroy"]
    pub fn swap_chain_destroy(swap_chain: *mut *mut swap_chain);
    #[link_name = "gvr_swap_chain_get_buffer_count"]
    pub fn swap_chain_get_buffer_count(swap_chain: *const swap_chain)
     -> int32_t;
    #[link_name = "gvr_swap_chain_get_buffer_size"]
    pub fn swap_chain_get_buffer_size(swap_chain: *mut swap_chain,
                                      index: int32_t) -> sizei;
    #[link_name = "gvr_swap_chain_resize_buffer"]
    pub fn swap_chain_resize_buffer(swap_chain: *mut swap_chain,
                                    index: int32_t, size: sizei);
    #[link_name = "gvr_swap_chain_acquire_frame"]
    pub fn swap_chain_acquire_frame(swap_chain: *mut swap_chain)
     -> *mut frame;
    #[link_name = "gvr_frame_bind_buffer"]
    pub fn frame_bind_buffer(frame: *mut frame, index: int32_t);
    #[link_name = "gvr_frame_unbind"]
    pub fn frame_unbind(frame: *mut frame);
    #[link_name = "gvr_frame_get_buffer_size"]
    pub fn frame_get_buffer_size(frame: *const frame, index: int32_t)
     -> sizei;
    #[link_name = "gvr_frame_get_framebuffer_object"]
    pub fn frame_get_framebuffer_object(frame: *const frame, index: int32_t)
     -> int32_t;
    #[link_name = "gvr_frame_submit"]
    pub fn frame_submit(frame: *mut *mut frame,
                        list: *const buffer_viewport_list,
                        head_space_from_start_space: mat4f);
    #[link_name = "gvr_bind_default_framebuffer"]
    pub fn bind_default_framebuffer(gvr: *mut context);
    #[link_name = "gvr_get_time_point_now"]
    pub fn get_time_point_now() -> clock_time_point;
    #[link_name = "gvr_get_head_space_from_start_space_rotation"]
    pub fn get_head_space_from_start_space_rotation(gvr: *const context,
                                                    time: clock_time_point)
     -> mat4f;
    #[link_name = "gvr_apply_neck_model"]
    pub fn apply_neck_model(gvr: *const context,
                            head_space_from_start_space_rotation: mat4f,
                            factor: f32) -> mat4f;
    #[link_name = "gvr_pause_tracking"]
    pub fn pause_tracking(gvr: *mut context);
    #[link_name = "gvr_resume_tracking"]
    pub fn resume_tracking(gvr: *mut context);
    #[link_name = "gvr_reset_tracking"]
    pub fn reset_tracking(gvr: *mut context);
    #[link_name = "gvr_recenter_tracking"]
    pub fn recenter_tracking(gvr: *mut context);
    #[link_name = "gvr_set_default_viewer_profile"]
    pub fn set_default_viewer_profile(gvr: *mut context,
                                      viewer_profile_uri:
                                          *const ::std::os::raw::c_char)
     -> u8;
    #[link_name = "gvr_refresh_viewer_profile"]
    pub fn refresh_viewer_profile(gvr: *mut context);
    #[link_name = "gvr_get_viewer_vendor"]
    pub fn get_viewer_vendor(gvr: *const context)
     -> *const ::std::os::raw::c_char;
    #[link_name = "gvr_get_viewer_model"]
    pub fn get_viewer_model(gvr: *const context)
     -> *const ::std::os::raw::c_char;
    #[link_name = "gvr_get_viewer_type"]
    pub fn get_viewer_type(gvr: *const context) -> int32_t;
    #[link_name = "gvr_get_eye_from_head_matrix"]
    pub fn get_eye_from_head_matrix(gvr: *const context, eye: int32_t)
     -> mat4f;
    #[link_name = "gvr_get_window_bounds"]
    pub fn get_window_bounds(gvr: *const context) -> recti;
    #[link_name = "gvr_compute_distorted_point"]
    pub fn compute_distorted_point(gvr: *const context, eye: int32_t,
                                   uv_in: vec2f, uv_out: *mut vec2f);
}
